names(shuttle)
glm(use ~ auto+wind, data = shuttle,family="binomial")
summary(shuttle)
glm(use ~ wind, data = shuttle,family="binomial")
shuttle$wind=as.factor(shuttle)
shuttle$wind=as.factor(shuttle$wind)
glm(use ~ wind, data = shuttle,family="binomial")
glm(use ~ wind+0, data = shuttle,family="binomial")
q1_fit=glm(use ~ wind+0, data = shuttle,family="binomial")
q1_fit=glm(use ~ wind+0, data = shuttle,family="binomial")
coef(q1_fit)
coef(q1_fit)[1/coef(q1_fit)[2]
coef(q1_fit)[1]/coef(q1_fit)[2]
coef(q1_fit)[1]/coef(q1_fit)[2]
q1_fit=glm(use ~ wind-1, data = shuttle,family="binomial")
coef(q1_fit)[1]/coef(q1_fit)[2]
q1_fit
exp(coef(q1_fit)[1])/exp(coef(q1_fit)[2])
summary(q1_fit)
summary(q1_fit)$coef
coef(q1_fit)
exp_coef=exp(coef(q1_fit))
exp_coef
exp_coef[1]/exp_coef[2]
wind
summary(shuttle)
table(shuttle$wind,shuttle$use)
coef(q1_fit)
coef(q1_fit)[1]/coef(q1_fit)[2]
library(MASS)
dim(shuttle)
head(shuttle)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
fit <- glm(newUse ~ as.factor(wind) - 1, data=shuttle, family="binomial")
summary(fit)
coef(fit)
odds <- exp(summary(fit)$coef)
odds[1] / odds[2]
library(MASS)
data(shuttle)
shuttle=shuttle
summary(shuttle)
shuttle$wind=as.factor(shuttle$wind)
table(shuttle$wind,shuttle$use)
q1_fit=glm(use ~ wind+0, data = shuttle,family="binomial")
coef(q1_fit)
exp_coef
odds
odds[1]
exp_coef
exp_coef=exp(summary((q1_fit)$coef)
exp_coef
exp_coef=exp(summary((q1_fit)$coef)
)
exp_coef
exp_coef=exp(summary(q1_fit)$coef)
exp_coef
odds
summary(q1_fit)$coef
q1_fit=glm(use ~ wind+0, data = shuttle,family="binomial")
q1_fit
summary(fit)
summary(q1_fit)
exp(summary(fit)$coef)
exp(summary(q1_fit)$coef)
library(MASS)
data(shuttle)
shuttle=shuttle
summary(shuttle)
shuttle$wind=as.factor(shuttle$wind)
shuttle$newUse <- as.numeric(shuttle$use == "auto")
table(shuttle$wind,shuttle$use)
q1_fit=glm(use ~ wind+0, data = shuttle,family="binomial")
exp_coef=exp(summary(q1_fit)$coef)
exp_coef[1]/exp_coef[2]
q1_fit
exp_coef=exp(summary(q1_fit)$coef)
exp_coef
View(shuttle)
library(MASS)
data(shuttle)
shuttle=shuttle
summary(shuttle)
shuttle$wind=as.factor(shuttle$wind)
shuttle$use <- as.numeric(shuttle$use == "auto")
table(shuttle$wind,shuttle$use)
q1_fit=glm(use ~ wind+0, data = shuttle,family="binomial")
exp_coef=exp(summary(q1_fit)$coef)
exp_coef[1]/exp_coef[2]
q2_fit=glm(use ~ wind+magn+0, data = shuttle,family="binomial")
exp_coef=exp(summary(q2_fit)$coef)
exp_coef[1]/exp_coef[2]
data(InsectSprays)
InsectSprays=InsectSprays
summary(InsectSprays)
class(InsectSprays$spray)
class(InsectSprays$count)
data(InsectSprays)
InsectSprays=InsectSprays
summary(InsectSprays)
glm(count~spray,family="poisson",data=InsectSprays)
glm(count~spray+0,family="poisson",data=InsectSprays)
q4_fit=glm(count~spray+0,family="poisson",data=InsectSprays)
coef(q4_fit)
q4_fit=glm(count~spray+0,family="poisson",data=InsectSprays)
coef(q4_fit)
exp_coef=exp(coef(q4_fit))
exp_coef
exp_coef[1]/exp_coef[2]
knots <- 0
spline <- sapply(knots, function(knot) (x > knot) * (x - knot))
spline
xMatrix <- cbind(1, x, spline)
xMatrix
fit <- lm(y ~ xMatrix +0)
fit
pred <- predict(q6_fit)
q6_fit <- lm(y ~ xMatrix +0)
pred <- predict(q6_fit)
pred
q6_fit
coef(q6_fit)
plot(x, y)
lines(x, pred, col=2)
x <- -5 : 5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54,
3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
fit <- lm(y ~ xMatrix - 1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit$coef[3]
slope # 1.013
plot(x, y)
lines(x, yhat, col=2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
spline <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
q6_fit <- lm(y ~ xMatrix +0)
q6_fit
xMatrix
slope <- coef(q6_fit)
slope
coef(q6_fit)
plot(x, y)
lines(x, pred, col=2)
pred <- predict(q6_fit)
plot(x, y)
lines(x, pred, col=2)
q6_fit
summary(q6_fit)
coef(q6_fit)[1]+coef(q6_fit)[2]
coef(q6_fit)[2]+coef(q6_fit)[3]
data=data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep("A","B",C))
data
data=data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep("A","B",C))
data=data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep("A","B","C","D",20))
data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep("A","B","C","D",20))
rep("A","B","C","D",20)
data=data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep(c("A","B","C","D"),20))
rep(c("A","B","C","D"),20)
data=data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep(c("A","B","C","D"),25))
C_types=levels(data$C_fac)
C_types
for (type in C_types){
print(type)
}
for (type in C_types){
which(data$C_fac==type)
}
for (type in C_types){
print(which(data$C_fac==type))
}
for (type in C_types){
ind=which(data$C_fac==type)
len=length(ind)
rmse_temp=sqrt(sum((data$B_Est[ind]-data$A_Obs[ind])^2))/len
print("RMSE for ",type,"is ",rmse_temp)
}
C_types
type="A"
ind=which(data$C_fac==type)
ind
len=length(ind)
len
rmse_temp=sqrt(sum((data$B_Est[ind]-data$A_Obs[ind])^2))/len
rmse_temp
print("RMSE for ",type,"is ",rmse_temp)
rmse_temp
for (type in C_types){
ind=which(data$C_fac==type)
len=length(ind)
rmse_temp=sqrt(sum((data$B_Est[ind]-data$A_Obs[ind])^2))/len
print(paste("RMSE for ",type,"is ",rmse_temp))
}
data=data.frame(A_Obs=rnorm(100),B_Est=rnorm(100),C_fac=rep(c("A","B","C","D"),25))
C_types=levels(data$C_fac)
for (type in C_types){
ind=which(data$C_fac==type)
len=length(ind)
rmse_temp=sqrt(sum((data$B_Est[ind]-data$A_Obs[ind])^2))/len
print(paste("RMSE for ",type,"is ",rmse_temp))
}
data=data.frame(A_Obs=rnorm(100),B_Est=runif(100),C_fac=rep(c("A","B","C","D"),25))
C_types=levels(data$C_fac)
for (type in C_types){
ind=which(data$C_fac==type)
len=length(ind)
rmse_temp=sqrt(sum((data$B_Est[ind]-data$A_Obs[ind])^2))/len
print(paste("RMSE for ",type,"is ",rmse_temp))
}
data(mtcars)
mtcars=mtcars
head(mtcars)
View(mtcars)
?mtcars
tab(mtcars$am)
tabulate(mtcars$am)
table(mtcars$am)
library(ggplot2)
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))
mtcars=tbl_df(mtcars)
library(dplyr)
mtcars=tbl_df(mtcars)
mtcars
class(mtcars$am)
class(mtcars$am)="factor"
table(mtcars$am)
mtcars$am=asfactor(mtcars$am)
mtcars$am=as.factor(mtcars$am)
mtcars$am=as.factor(mtcars$am)
table(mtcars$am)
mtcars %>% group_by(am) %>% summarise(min(mpg),mean(mpg),max(mpg))
?mtcars
lm(mpg~am,data=mtcars)
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))
?mtcars
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle(Fuel Efficiency by Transmission type)+xlab("Miles Per Gallon (MPG)")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
scale_fille_discrete(name="Transmisson")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
scale_fill_discrete(name="Transmisson")
?mtcars
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
scale_fill_discrete(name="Transmisson",labels=c("Automatic","Manual"))
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
+ theme(legend.title="Transmisson")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=am))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
scale_fill_discrete(name="Transmisson",labels=c("Automatic","Manual"))
mtcar$Transmission=as.factor(mtcars$am)
mtcars$Transmission=as.factor(mtcars$am)
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg),max(mpg))
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
scale_fill_discrete(name="Transmisson",labels=c("Automatic","Manual"))
mtcars$Transmission[which(mtcars$Transmission==0)]="Automatic"
mtcars$Transmission[which(mtcars$Transmission==1)]="Manual"
mtcars$Transmission[which(mtcars$Transmission==0)]="Automatic"
which(mtcars$Transmission==0)
mtcars$Transmission[which(mtcars$Transmission=="0")]="Automatic"
which(mtcars$Transmission=="0")
mtcars$Transmission
as.factor(mtcars$am)
mtcars$Transmission=mtcars$am
mtcars$Transmission
which(mtcars$Transmission==0)
mtcars$Transmission[which(mtcars$Transmission==0)]="Automatic"
mtcars$Transmission[which(mtcars$Transmission==1)]="Manual"
mtcars$Transmission=NA
mtcars$Transmission[which(mtcars$am==0)]="Automatic"
mtcars$Transmission[which(mtcars$am==1)]="Manual"
mtcars$Transmission
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg),max(mpg))
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")+
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_area(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
lm(mpg~Transmission,data=mtcars)
lm(mpg~Transmission+0,data=mtcars)
mtcars
ggplot(data=mtcars)+theme_bw()+geom_boxplot(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_boxplot(aes(x=mpg,color=Transmission))
ggplot(data=mtcars)+theme_bw()+geom_boxplot(aes(x=mpg,y=Transmission))
ggplot(data=mtcars)+theme_bw()+geom_boxplot(mpg~Transmission)
ggplot(data=mtcars)+geom_boxplot(mpg~Transmission)
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
boxplot(mpg~Transmission)
boxplot(mpg~Transmission,data=mtcars)
boxplot(mpg~Transmission,data=mtcars)+  ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg)median(mpg),max(mpg))
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg),median(mpg),max(mpg))
?mtcars
ggplot(data=mtcars)+theme_bw()+geom_point(aes(x=mpg,y=wt,color=Transmission))
ggplot(data=mtcars)+theme_bw()+geom_point(aes(x=mpg,y=wt,color=Transmission))+geom_line()
ggplot(data=mtcars)+theme_bw()+geom_point(aes(x=mpg,y=wt,color=Transmission))+geom_line(x=mpg,y=wt)
ggplot(data=mtcars)+theme_bw()+geom_point(aes(x=mpg,y=wt,color=Transmission))+geom_smooth(method=lm)
ggplot(data=mtcars)+theme_bw()+geom_point(aes(x=mpg,y=wt,color=Transmission))
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Weight")+ylab("Miles Per Gallon (MPG)")+xlab("Weight")
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,y=wt,x=mpg)
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Weight")+ylab("Miles Per Gallon (MPG)")+xlab("Weight")
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg),median(mpg),max(mpg))
t.test(data=mtcars,mpg~Transmission)
t_result=t.test(data=mtcars,mpg~Transmission)
t_result$p.value
t_result$estimate
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg),median(mpg),max(mpg))
t.test(data=mtcars,mpg~Transmission)
?mtcars
mostly_numeric_model=lm(mpg~Transmission+cyl+hp+disp+drat+wt+qsec,data=mtcars)
summary(mostly_numeric_model)
categorical_fit=lm(mpg~Transmission+0,data=mtcars)
summary(categorical_fit)
result <- anova(mostly_numeric_model, categorical_fit, test="Chi")
result
significant_model=lm(mpg~Transmission+wt,data=mtcars)
summary(significant_model)
categorical_fit=lm(mpg~Transmission+0,data=mtcars)
summary(categorical_fit)
anova(mostly_numeric_model,significant_model, test="Chi")
mostly_numeric_model=lm(mpg~Transmission+cyl+hp+disp+drat+wt+qsec,data=mtcars)
summary(mostly_numeric_model)
significant_model=lm(mpg~Transmission+wt,data=mtcars)
summary(significant_model)
anova(mostly_numeric_model,significant_model, test="Chi")
mostly_numeric_model=lm(mpg~cyl+hp+disp+drat+wt+qsec,data=mtcars)
summary(mostly_numeric_model)
significant_model=lm(mpg~wt,data=mtcars)
summary(significant_model)
anova(mostly_numeric_model,significant_model, test="Chi")
mostly_numeric_model=lm(mpg~Transmission+cyl+hp+disp+drat+wt+qsec,data=mtcars)
summary(mostly_numeric_model)
stepwise_model=step(mostly_numeric_model,k=log(nrow(mtcars)))
stepwise_model
summary(stepwise_model)
anova(mostly_numeric_model,stepwise_model, test="Chi")
summary(mostly_numeric_model)
summary(stepwise_model)
anova(mostly_numeric_model,stepwise_model, test="Chi")
categorical_fit=lm(mpg~Transmission+0,data=mtcars)
summary(categorical_fit)
anova(stepwise_model, categorical_fit, test="Chi")
categorical_fit=lm(mpg~Transmission,data=mtcars)
summary(categorical_fit)
anova(stepwise_model, categorical_fit, test="Chi")
# The P-value is smaller than 0.05. So, according to our criterion,
par(mfrow=c(2,2))
plot(stepwise_model)
par(mfrow=c(1,1))
plot(stepwise_model)
qplot(fitted(stepwise_model),residuals(stepwise_model))
qplot(fitted(stepwise_model),residuals(stepwise_model))+geom_hline(yintercept=0)+theme_bw
qplot(fitted(stepwise_model),residuals(stepwise_model))+geom_hline(yintercept=0)+theme_bw()
qqnorm(residuals(stepwise_model))
?mtcars
summary(stepwise_model)
library(ggplot2)
library(dplyr)
data(mtcars)
?mtcars
mtcars=tbl_df(mtcars)
mtcars
# Is an automatic or manual transmission better for MPG?
mtcars$Transmission=NA
mtcars$Transmission[which(mtcars$am==0)]="Automatic"
mtcars$Transmission[which(mtcars$am==1)]="Manual"
mtcars %>% group_by(Transmission) %>% summarise(min(mpg),mean(mpg),median(mpg),max(mpg))
t.test(data=mtcars,mpg~Transmission)
# Quantify the MPG difference between automatic and manual transmissions
mostly_numeric_model=lm(mpg~Transmission+cyl+hp+disp+drat+wt+qsec,data=mtcars)
summary(mostly_numeric_model)
stepwise_model=step(mostly_numeric_model,k=log(nrow(mtcars)))
summary(stepwise_model)
anova(mostly_numeric_model,stepwise_model, test="Chi")
# The P-value is larger than 0.05. So, according to our criterion,
# we would fail to reject the more simplified model,
categorical_fit=lm(mpg~Transmission,data=mtcars)
summary(categorical_fit)
anova(stepwise_model, categorical_fit, test="Chi")
# The P-value is smaller than 0.05. So, according to our criterion,
# we would reject the more simplified model,
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Weight")+ylab("Miles Per Gallon (MPG)")+xlab("Weight")
qplot(fitted(stepwise_model),residuals(stepwise_model))+geom_hline(yintercept=0)+theme_bw()
qqnorm(residuals(stepwise_model))
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Weight")+ylab("Miles Per Gallon (MPG)")+xlab("Weight")
qplot(fitted(stepwise_model),residuals(stepwise_model))+geom_hline(yintercept=0)+theme_bw()
qqnorm(residuals(stepwise_model))
qplot(fitted(stepwise_model),residuals(stepwise_model))+geom_hline(yintercept=0)+theme_bw()
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Weight")+ylab("Miles Per Gallon (MPG)")+xlab("Weight")
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
ggplot(data=mtcars)+theme_bw()+geom_point(aes(y=wt,x=mpg,color=Transmission))+
geom_smooth(method=lm,aes(y=wt,x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Weight")+ylab("Miles Per Gallon (MPG)")+xlab("Weight")
install.packages("viridis") # dependency
install.packages("devtools")
devtools::install_github("ropensci/plotly")
install.packages("Rtools")
install.packages("viridis") # dependency
install.packages("devtools")
install.packages("devtools")
install.packages("viridis") # dependency
library("devtools")
install.packages("devtools")
library("devtools")
devtools::install_github("ropensci/plotly")
library("devtools")
devtools::install_github("ropensci/plotly")
install.packages("viridis") # dependency
library("viridis")
library("devtools")
install.packages("viridis") # dependency
install.packages("viridis", type="source") # dependency
library("viridis")
library("devtools")
devtools::install_github("ropensci/plotly")
plotly:::verify("JeffreyUslan")
plotly:::verify("4txr51h2pd")
library("plotly")
devtools::install_git("github.com/ropensci/plotly.git";, branch = "dev")
devtools::install_git("github.com/ropensci/plotly.git", branch = "dev")
devtools::install_git("github.com/ropensci/plotly", branch = "dev")
devtools::install_git("github.com/ropensci/plotly")
options(download.file.method = "wininet")
devtools::install_github("ropensci/plotly")
install_github("hadley/httr")
library("Rtools")
install.packages("Rtools")
install.packages("Rtools", type="source")
install.packages("Rtools", type="source")
Sys.getenv('PATH')
install.packages("Rtools")
install.packages("Rtools", type="source")
Sys.getenv('PATH')
install.packages("Rtools")
find_rtools()
install.packages("installr")
require(installr)
updateR()
library("viridis")
install.packages("viridis", type="source") # dependency
library("viridis")
library("devtools")
library("devtools")
library("Rtools")
install.packages("Rtools")
library("Rtools")
library("devtools")
devtools::install_github("ropensci/plotly")
library("plotly")
plotly:::verify("JeffreyUslan")
plotly:::verify("4txr51h2pd")
library("Rtools")
install.packages("Rtools")
library("plotly")
Sys.setenv("plotly_username"="JeffreyUslan")
Sys.setenv("plotly_api_key"="4txr51h2pd")
library(ggplot2)
library(dplyr)
data(mtcars)
?mtcars
mtcars=tbl_df(mtcars)
mtcars
mtcars$Transmission=NA
mtcars$Transmission[which(mtcars$am==0)]="Automatic"
mtcars$Transmission[which(mtcars$am==1)]="Manual"
ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
g=ggplot(data=mtcars)+theme_bw()+geom_density(aes(x=mpg,color=Transmission))+
ggtitle("Fuel Efficiency by Transmission type")+xlab("Miles Per Gallon (MPG)")+ylab("Density")
g
ggplotly(g)
